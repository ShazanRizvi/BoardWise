// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id               String        @id @default(uuid())
  organizationName String
  users            User[]
  orgLogo          String?
  products         Product[]
  projects         Project[]
  inviteTokens     InviteToken[]

  @@map("organization")
}

model Product {
  id             String       @id @default(uuid())
  productName    String
  description    String?
  users          ProductAccess[]
  projects       Project[]    // A product can have multiple projects
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("product")
}
model ProductAccess {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Project {
  id             String       @id @default(uuid())
  projectName    String
  description    String?
  product        Product      @relation(fields: [productId], references: [id]) 
  productId      String      
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  tasks          Task[]
  users          ProjectAccess[]
  

  @@map("project")
}

model ProjectAccess {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  canEdit   Boolean @default(false) // Optional: Manage permissions for tasks
}
model Task {
  id              String   @id @default(uuid())
  taskName        String
  taskDescription String?
  taskTags        String[]
  users           User[]
  project         Project  @relation(fields: [projectId], references: [id])
  projectId       String

  @@map("task")
}

model User {
  id             String        @id @default(uuid())
  username       String
  emailAddress   String        @unique
  loginType      String?
  password       String
  userOrgPosition String?    
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  products       ProductAccess[]  
  projects       ProjectAccess[]  
  tasks          Task[]
  userRole       Role[]        @relation("UserRoles")

  @@map("user")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserRoles")

  @@map("role")
}

model InviteToken {
  id             String       @id @default(uuid())
  token          String       @unique
  emailAddress   String
  userRole       String
  userOrgPosition String? 
  expiresAt      DateTime
  isUsed         Boolean      @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String 

  @@index([organizationId]) 
}

